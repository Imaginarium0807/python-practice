Python:
- 給一個string, 算某個character 出現的頻率
- replace none with the previous value
- given two lists output the words that don't exist in both lists
- given a dictionary, return the key-value with n_highest_value
def str_count(input):
    s = input.split()
    s_unique = set(s)
    for word in s_unique:
        print(word,input.count(word))
        
        
        
2. Python （刷leetcode)
char occur in sentense
filling none value with the most recent value
mismatching String
n highest value in a sorted dictionary

https://www.geeksforgeeks.org/python-frequency-of-each-character-in-string/

unique_list = {}
for i in st:
    if i in unique_list:
        unique_list[i] += 1
    else:
        unique_list[i] = 1
ls = []
for each in unique_list.items():
    ls.append(each)
    
    --
from collections import Counter
Counter(st)

--
res = {}
for e in st:
    res[e] = res.get(e,0) + 1
--
s_unique = set(st)
x = {e: st.count(e) for e in s_unique}

--
s = 'karama is a bitch do you believe it yes I believe it'
ls = list(s.replace(" ",""))
unique_ls = set(ls)
count1 = {e: ls.count(e) for e in unique_ls}
s_count = {e: count1[e] for e in sorted(count1,key=count1.get,reverse = True)}
-

list1 = ["best","test","lala","apple","karama"]
t = 'karama is a bitch do you believe it yes I believe it lala'
list2 = t.split()
common_set=set(list1)&set(list2)
all_set = set(list1+list2)
result_list = list(all_set-common_set)
